zenchain: 1.0
start: W3C-DID-Controller-DID-Document-1-create-public-keys.zen
blocks:
  W3C-DID-Controller-DID-Document-1-create-public-keys.zen:
    zenContent: |
      Rule caller restroom-mw

      # Here we are loading all the scenarios needed for the keys creations
      Scenario 'ecdh': Create the key
      Scenario 'ethereum': Create key
      Scenario 'eddsa': Create the key

      # keyring
      Given I am 'Issuer'
      Given I read the content of 'contracts/keyring.json'
      Given I have my 'keyring'


      When I create the ecdh public key
      When I create the eddsa public key
      When I create the ethereum address
      Then print data
    next: W3C-DID-Controller-DID-Document-2-create-id.zen
  W3C-DID-Controller-DID-Document-2-create-id.zen:
    zenContent: |-
      Given I have a 'string' named 'ecdh public key'
      Given I have a 'string' named 'eddsa public key'
      Given I have a 'string' named 'ethereum address'

      When I set 'id' to 'did:dyne:controller:' as 'string'
      When I append 'eddsa public key' to 'id'

      Then print data
    next: W3C-DID-Controller-DID-Document-3-Document-creation.zen
  W3C-DID-Controller-DID-Document-3-Document-creation.zen:
    zenContent: >
      Rule caller restroom-mw


      Given I have a valid redis connection on 'redis://localhost:6379'

      Given I read from redis the data under the key named 'id' and save the
      output into 'W3C-DID'

      Given I have a 'string array' named 'W3C-DID'


      # load controller public keys

      Given I have a 'string' named 'ecdh public key'

      Given I have a 'string' named 'eddsa public key'

      Given I have a 'string' named 'ethereum address'

      Given I have a 'string' named 'id'

      # load @context

      Given I have a 'string array' named '@context'


      When I create the length of 'W3C-DID'

      When I set '0' to '0' base '10'

      When I create the 'string dictionary' named 'output'


      If number 'length' is more than '0'

      When I set 'result' to 'The Controller has already been announced' as
      'string'

      When I insert 'result' in 'output'

      Then print the 'output'

      Endif


      # check if DID doc already exists

      If number 'length' is equal to '0'

      ### DID-Document

      When I create the 'string dictionary' named 'DID'


      ## id

      When I copy 'id' to 'did:dyne:controller:'

      When I insert 'id' in 'DID'


      ## @context

      When I insert '@context' in 'DID'


      ## alsoKnownAs

      When I set 'alsoKnownAs' to 'did:dyne:fabchain:' as 'string'

      When I append 'eddsa public key' to 'alsoKnownAs'

      When I insert 'alsoKnownAs' in 'DID'


      ## veririfcationMethod

      When I create the 'string array' named 'verificationMethod'

      # 1-ecdsa public key

      When I create the 'string dictionary' named 'verification-key1'

      # pk

      When I copy 'ecdh public key' to 'publicKeyBase64' 

      When I insert 'publicKeyBase64' in 'verification-key1'

      # type

      When I set 'type' to 'EcdsaSecp256k1VerificationKey_b64' as 'string'

      When I insert 'type' in 'verification-key1'

      # id

      When I copy 'did:dyne:controller:' to 'id'

      When I set '#key1' to '#key1' as 'string'

      When I append '#key1' to 'id'

      When I insert 'id' in 'verification-key1'

      # controller

      When I copy 'did:dyne:controller:' to 'controller'

      When I insert 'controller' in 'verification-key1'

      When I insert 'verification-key1' in 'verificationMethod'


      # 2-eddsa public key

      When I create the 'string dictionary' named 'verification-key2'

      # pk

      When I copy 'eddsa_public_key' to 'publicKeyBase58'

      When I insert 'publicKeyBase58' in 'verification-key2'

      # type

      When I set 'type' to 'Ed25519VerificationKey2018' as 'string'

      When I insert 'type' in 'verification-key2'

      # id

      When I copy 'did:dyne:controller:' to 'id'

      When I set '#key_eddsa1' to '#key_eddsa1' as 'string'

      When I append '#key_eddsa1' to 'id'

      When I insert 'id' in 'verification-key2'

      # controller

      When I copy 'did:dyne:controller:' to 'controller'

      When I insert 'controller' in 'verification-key2'

      When I insert 'verification-key2' in 'verificationMethod'


      # 3-ethereum address

      When I create the 'string dictionary' named 'verification-key3'

      # address

      # this follows the
      CAIP-10(https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md)
      spec

      # thus it is: namespace + ":" + chain_id + ":" + address

      When I set 'blockchainAccountId' to 'eip155:1717658228:0x' as 'string'

      When I append 'ethereum address' to 'blockchainAccountId'

      When I insert 'blockchainAccountId' in 'verification-key3'

      # type

      When I set 'type' to 'EcdsaSecp256k1RecoveryMethod2020' as 'string'

      When I insert 'type' in 'verification-key3'

      # id

      When I copy 'did:dyne:controller:' to 'id'

      When I set '#fabchainAccountId' to '#fabchainAccountId' as 'string'

      When I append '#fabchainAccountId' to 'id'

      When I insert 'id' in 'verification-key3'

      # controller

      When I copy 'did:dyne:controller:' to 'controller'

      When I insert 'controller' in 'verification-key3'

      When I insert 'verification-key3' in 'verificationMethod'


      When I insert 'verificationMethod' in 'DID'


      ### DID-Document ended

      When I copy 'did:dyne:controller:' to 'id'

      When I insert 'DID' in 'output'

      When I insert 'id' in 'output'

      ### print out

      Then print the 'output'

      EndIf


      Then print the 'ethereum address'
    keysFile: W3C-DID-Controller-DID-Document-3-Document-creation.keys
    next: W3C-DID-Controller-DID-Document-4-store-ethereum.zen
  W3C-DID-Controller-DID-Document-4-store-ethereum.zen:
    zenContent: >-
      Rule caller restroom-mw

      Scenario ethereum: store DID-document


      # keyring

      Given I am 'Issuer'

      Given I read the content of 'contracts/keyring.json'

      # ethereum

      Given I have a ethereum endpoint named 'fabchain'

      Given I read the ethereum suggested gas price

      Given I read the ethereum nonce for 'ethereum_address'

      #timestamp

      Given I fetch the local timestamp and store it into 'timestamp'

      Given I have a 'string' named 'timestamp'

      # transaction

      Given I have my 'keyring'

      Given I have a 'ethereum address' named 'storage contract'

      Given I have a 'ethereum nonce'

      Given I have a 'gas price'

      Given I have a 'gas limit'

      # did

      Given I have a 'string dictionary' named 'output'


      When I rename 'output' to 'input'

      When I create the 'string dictionary' named 'output'


      If 'result' is found in 'input'

      When I pickup from path 'input.result'

      When I insert 'result' in 'output'

      # fake txid for next script

      When I set 'txid' to '0' as 'string'

      Then print the 'txid'

      Then print the 'output'

      EndIf


      If 'result' is not found in 'input'

      When I pickup from path 'input.DID'

      When I pickup from path 'input.id'

      # content of transaction

      When I create the 'string dictionary' named 'DID-timestamp'

      When I copy 'DID' to 'DID_copy'

      When I insert 'DID' in 'DID-timestamp'

      When I copy 'timestamp' to 'announce'

      When I insert 'announce' in 'DID-timestamp'

      When I create the mpack of 'DID-timestamp'


      # transaction

      When I create the ethereum transaction to 'storage contract'

      When I use the ethereum transaction to store 'mpack'

      When I create the signed ethereum transaction for chain 'fabt'


      When I rename 'DID_copy' to 'DID'

      When I insert 'DID' in 'output'

      Then print the 'signed ethereum transaction'

      Then print the 'output'


      Then I ask ethereum to broadcast the 'signed_ethereum_transaction' and
      save the transaction id in 'txid'

      EndIf
    keysFile: W3C-DID-Controller-DID-Document-4-store-ethereum.keys
    next: W3C-DID-Controller-DID-Document-5-store-txid.zen
  W3C-DID-Controller-DID-Document-5-store-txid.zen:
    zenContent: >-
      Rule caller restroom-mw

      Given I have a valid redis connection on 'redis://localhost:6379'

      Given I have a 'string dictionary' named 'output'

      Given I have a 'string' named 'txid'


      If 'result' is found in 'output'

      Then print the 'output'

      EndIf


      If 'result' is not found in 'output'

      When I pickup from path 'output.DID'

      When I pickup from path 'output.DID.alsoKnownAs'

      When I pickup from path 'output.DID.id'


      When I create the 'string dictionary' named 'txidContainer'

      When I insert 'txid' in 'txidContainer'

      When I copy 'id' to 'id_copy'

      When I insert 'id' in 'txidContainer'

      When I rename the 'id_copy' to 'id'


      Then print the 'txidContainer'

      Then print the 'alsoKnownAs'

      Then print the 'DID'

      Then print the 'id'


      ### save on redis

      Then I write 'DID' into redis under the key named by 'id'

      Then I write 'txidContainer' into redis under the key named by
      'alsoKnownAs'


      Then print the string  'All writtend on chain and in the DID!'

      EndIf
