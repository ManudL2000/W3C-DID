zenchain: 1.0
start: W3C-DID-oracle-deannounce-1-extract-address.zen
blocks:
  W3C-DID-oracle-deannounce-1-extract-address.zen:
    zenContent: |
      Rule caller restroom-mw
      Scenario 'ethereum': create ethereum address

      Given I read the content of 'contracts/keyring.json'
      Given I am 'Issuer'
      Given I have my 'keyring'
      Given I have a 'string' named 'id'

      When I create the ethereum address

      Then print the data
    next: W3C-DID-oracle-deannounce-2-addressnonce.zen
  W3C-DID-oracle-deannounce-2-addressnonce.zen:
    zenContent: |
      Given I have a 'string' named 'id'
      Given I have a 'string' named 'ethereum address'

      When I set ':nonce' to ':nonce' as 'string'
      When I append ':nonce' to 'ethereum address'
      When I rename the 'ethereum address' to 'address:nonce'

      Then print the 'id'
      Then print the 'address:nonce'
    next: W3C-DID-oracle-deannounce-3-transaction-and-redis.zen
  W3C-DID-oracle-deannounce-3-transaction-and-redis.zen:
    zenContent: >
      Rule caller restroom-mw

      Scenario ethereum: store deannounce data


      # restroom-redis

      Given I have a valid redis connection on 'redis://localhost:6379'

      Given I read into 'ethereum_nonce' and increment the key named by
      'address:nonce'

      Given I fetch the local timestamp and store it into 'deannounce'


      # restroom-ethereum

      Given I have a ethereum endpoint named 'fabchain'

      Given I read the ethereum suggested gas price


      # restroom-keyring

      Given I read the content of 'contracts/keyring.json'


      # for the tx

      Given I have a 'ethereum nonce'

      Given I have a 'gas price'

      Given I have a 'gas limit'

      Given I have a 'ethereum address' named 'storage contract'


      Given I am 'Issuer'

      Given I have my 'keyring'

      Given I have a 'string' named 'id'

      Given I have a 'string' named 'deannounce'


      # transaction data

      When I create the 'string dictionary' named 'tx'

      When I copy 'id' to 'id_copy'

      When I insert 'id' in 'tx'

      When I insert 'deannounce' in 'tx'

      When I create the mpack of 'tx'


      # transaction

      When I create the ethereum transaction to 'storage contract'

      When I use the ethereum transaction to store 'mpack'

      When I create the signed ethereum transaction for chain 'fabt'


      # id

      When I rename 'id_copy' to 'id'

      # alsoKnownAs

      When I set ':' to ':' as 'string'

      When I set 'alsoKnownAs' to 'did:dyne:fabchain:' as 'string'

      When I create the array by splitting 'id' at ':'

      When I create the copy of element '4' in array 'array'

      When I append 'copy' to 'alsoKnownAs'


      Then print the 'signed ethereum transaction'

      Then print the 'id'

      Then print the 'alsoKnownAs'


      # ethereum broadcast

      Then I ask ethereum to broadcast the 'signed_ethereum_transaction' and
      save the transaction id in 'txid'

      # remove ids from redis

      Then I remove the key 'alsoKnownAs' in redis

      Then I remove the key 'id' in redis
    keysFile: W3C-DID-oracle-deannounce-3-transaction-and-redis.keys
