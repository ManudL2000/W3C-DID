zenchain: 1.0
start: v1/sandbox/pubkeys-accept-1-path.zen
blocks:
  v1/sandbox/pubkeys-accept-1-path.zen:
    zenContent: |
      Rule caller restroom-mw
      Scenario 'eddsa': verify singatures
      Scenario 'w3c': proof

      # load eddsa public key for broadcast
      Given I am 'Issuer'
      and I read the content of 'contracts/public_keys.json'
      and I have my 'eddsa public key'
      and I rename 'eddsa public key' to 'controller eddsa public key'
      
      Given I have a 'did document' named 'did document'
      and I rename 'did_document' to 'request_did_document'
      and I have a 'eddsa signature'
      and I have a 'string' named 'id'

      When I set ':' to ':' as 'string'
      and I set '/' to '/' as 'string'
      and I set 'true' to 'true' as 'string'
      and I set 'signer_path' to 'data/' as 'string'
      and I set 'admin' to 'admin' as 'string'
      and I set 'admin_check' to 'false' as 'string'

      # path and checks the id is admin
      When I create the array by splitting 'id' at ':'
      and I create the copy of element '3' in array 'array'
      and I rename the 'copy' to 'signer_idspec'
      # check
      If I verify 'signer_idspec' is equal to 'admin'
      When I remove 'admin_check'
      When I set 'admin_check' to 'true' as 'string'
      EndIf
      When I append 'signer_idspec' to 'signer_path'
      and I create the copy of element '4' in array 'array'
      and I rename the 'copy' to 'signer_idpk'
      and codec
      If I verify 'signer_idpk' ends with '/admin'
      # check
      When I remove 'admin_check'
      and I set 'admin_check' to 'true' as 'string'
      # path
      and I remove 'array'
      When I append '/' to 'signer_path'
      and I append 'admin' to 'signer_path'
      and I create the array by splitting 'signer_idpk' at '/'
      and I remove 'signer_idpk'
      and I create the copy of element '1' in array 'array'
      and I rename the 'copy' to 'signer_idpk'
      EndIf
      When I append '/' to 'signer_path'
      and I append 'signer_idpk' to 'signer_path'
      and I verify 'admin_check' is equal to 'true'
      
      Then print the 'signer_path'
      Then print the 'signer_idspec'
      Then print the 'request did document'
      Then print the 'eddsa signature'
      Then print the 'controller eddsa public key'
    next: v1/sandbox/pubkeys-accept-2-checks.zen
  v1/sandbox/pubkeys-accept-2-checks.zen:
    zenContent: |
      Rule caller restroom-mw
      Scenario 'eddsa': verify singatures
      Scenario 'w3c': proof
      
      ## proof needs:
      # - timestamp
      Given I fetch the local timestamp and store it into 'created'
      and I have a 'string' named 'created'
      # - controller keyring for jws signature
      Given I am 'Issuer'
      and I read the content of 'contracts/keyring.json'
      and I have my 'keyring'
      
      # signer did document
      Given I read the content of 'signer_path'
      Given I have a 'did document' named 'didDocument'
      Given I rename 'didDocument' to 'signer_did_document'
      
      # controller did document
      Given I read the content of 'contracts/did_document.json'
      Given I have a 'did document'
      Given I rename 'did document' to 'controller_did_document'

      # key
      Given I have a 'string dictionary' named 'proof'
      and I have a 'string' named '@context'
      # data
      Given I have a 'did document' named 'request did document'
      and I have a 'eddsa signature'
      and I have a 'eddsa public key' named 'controller eddsa public key'
      and I have a 'string' named 'signer_idspec'

      # utilities
      When I set 'admin' to 'admin' as 'string'
      and I set ':' to ':' as 'string'
      and I set '/' to '/' as 'string'

      # request_path is where did_document will be stored
      and I set 'request_path' to 'data/' as 'string'

      # ids are request, signer and controller
      When I pickup from path 'request_did_document.id'
      and I rename the 'id' to 'request_id'
      and I pickup from path 'signer_did_document.id'
      and I rename the 'id' to 'signer_id'
      and I pickup from path 'controller_did_document.id'
      and I rename the 'id' to 'controller_id'
      
      # verify that request_id strats with did:dyne:idpsec
      # but not with did:dyne:admin
      When I verify 'request_id' starts with 'did:dyne:'
      and I create the array by splitting 'request_id' at ':'
      and I create the copy of element '3' in array 'array'
      and I rename the 'copy' to 'request_idspec'
      and I verify 'request_idspec' is not equal to 'admin'
      and I create the copy of element '4' in array 'array'
      and I rename the 'copy' to 'request_idpk'

      # path
      When I append 'request_idspec' to 'request_path'
      and I append '/' to 'request_path'
      # if did:dyne:admin is the signer we are creating a idspec admin
      # otherwise if idspec admin is the signer we are creating a idspec
      If I verify 'signer_id' starts with 'did:dyne:admin:'
      When I append 'admin' to 'request_path'
      When I append '/' to 'request_path'
      EndIf
      # if signer is different from did:dyne:admin then the signer idspec
      # has to be equal to the request idspec
      If I verify 'signer_idspec' is not equal to 'admin'
      When I verify 'signer_idpsec' is equal to 'request_idspec'
      EndIf

      # end path
      When I append 'request_idpk' to 'request_path'
      
      # verify singautres
      When I create the verificationMethod of 'signer_did_document'
      and I pickup a 'eddsa_public_key' from path 'verificationMethod.eddsa_public_key'
      and I create the json of 'request did document'
      and I verify the 'json' has a eddsa signature in 'eddsa signature' by 'eddsa public key'
      and I remove the 'verificationMethod'

      # create proof
      When I create the jws signature of 'request did document'
      and I move 'jws' in 'proof'
      and I copy 'created' to 'timestamp'
      and I move 'created' in 'proof'

      # proof's verification method
      When I append the string '#ecdh_public_key' to 'controller_id'
      and I rename 'controller_id' to 'verificationMethod'
      and I move 'verificationMethod' in 'proof'
      and I move 'proof' in 'request did document'

      When I rename 'request_did_document' to 'didDocument'
      
      # metadata
      When I create the 'string dictionary' named 'didDocumentMetadata'
      and I rename the 'timestamp' to 'created'
      and I move 'created' in 'didDocumentMetadata'
      
      # result
      When I create the 'string dictionary' named 'result'
      and I move '@context' in 'result'
      and I move 'didDocument' in 'result'
      and I move 'didDocumentMetadata' in 'result'
      
      Then print the 'result'
      and print the 'request_path'
      and print the 'controller eddsa public key'
    keysFile: v1/sandbox/pubkeys-accept-2-checks.keys
